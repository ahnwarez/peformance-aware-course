#!/bin/bash

# Check if an argument was provided
if [ "$#" -ne 1 ]; then
  echo "Usage: $0 <path-to-source-file>"
  exit 1
fi

# Assign the first argument to a variable
SOURCE_FILE="$1"

print_success() {
  echo -e "\033[0;32m$1\033[0m" # Green
}

# Function to print error message in red
print_error() {
  echo -e "\033[0;31m$1\033[0m" >&2 # Red
}

# Step 1: Run your TypeScript app and save the output to a temporary .asm file
cat "$SOURCE_FILE" | tsx index.ts > ./assembly/temp.asm

cd assembly

# Step 2: Run NASM on the generated .asm file to produce an object file
nasm temp.asm

# Step 3: This step depends on what you're comparing.
# If you're comparing the binary output, you might need additional steps to extract
# readable information from the object file (temp.o).

# For demonstration, let's assume you want to compare the assembly code generated by your app
# with the original. This would be a comparison of temp.asm with your source file.
# This might not be what you're looking for if you expect binary comparison.

cd ..
if cmp -s "$SOURCE_FILE" ./assembly/temp; then
  print_success "Comparison successful, files are identical."
else
  xxd "$SOURCE_FILE"
  xxd ./assembly/temp
fi

# Cleanup temporary files
rm ./assembly/temp.asm ./assembly/temp.o
